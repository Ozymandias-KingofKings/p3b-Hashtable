p3b CONCLUSIONS.TXT

Complete p3b and answer the following questions using results of running JDK Mission Control to justify your conclusions..

Hypothesis: My hashtable will beat the TreeMap in terms of overall efficiency, but the hashtable will struggle at larger sizes because of the
memory cost of creating large arrays of linkedlists

Hypothesis was mostly correct, though it turned out that TreeMap's performance dropped off a lot more than my hashtable, despite the weakness
in the resize operation of my hashtable.


1) What can you tell about the performance of your hash table implementation compared to Java's tree map? 
Explain why (or when) your hash table is better or worse than Java's Tree Map.
The insert and get methods in TreeMap are significantly more memory-intensive than the ones in my hashtable. However, the resize method
in my hashtable costs some memory, more than TreeMap's rebalancing operation. Overall, though, my hashtable performs significantly better.

2) What did you observe in jdk mission control to come to the conclusion above?
The memory allocated to TreeMap's insert was 1.7 times greater than my hashtable. My hashtable used essentially no memory for the get operation,
but the memory required to instantiate a new array of empty linkedlists was, overall, twice as great as the memory required for TreeMap to rebalance.

3) SCREENSHOT_001.PNG NOTES: Briefly describe what this image 001 shows
Shows the memory breakdown by method for my hashtable, namely that the get method costs relatively little compared to insert
and init.

4) SCREENSHOT_002.PNG NOTES: Briefly describe what this image 002 shows
Shows the memory breakdown by method for treemap, specifically that the put method is costing
most of the memory, with get taking around half as much and the rebalancing costing less

5) Describe other screenshots if you include them in your submission.
